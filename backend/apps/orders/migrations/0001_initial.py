# Generated by Django 5.2.6 on 2025-09-25 13:48

import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "catalog",
            "0003_rename_catalog_men_source_de0e54_idx_cat_menuitem_source_idx_and_more",
        ),
        ("nutrition", "0003_menuplan_processing_and_meal_note"),
        ("users", "0005_profile_avatar_preferences_profile_wallet_settings"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DeliveryService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField()),
                ("name", models.CharField(max_length=120)),
                ("city", models.CharField(max_length=120)),
                ("api_base_url", models.URLField(blank=True)),
                ("api_key", models.CharField(blank=True, max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "supports_live_tracking",
                    models.BooleanField(
                        default=False,
                        help_text="Позволяет ли партнёр отдавать ссылки на live-трекинг курьеров",
                    ),
                ),
                (
                    "cutoff_lead_time_minutes",
                    models.PositiveIntegerField(
                        default=180,
                        help_text="За сколько минут до начала слота можно принять заказ",
                    ),
                ),
                (
                    "webhook_secret",
                    models.CharField(
                        blank=True,
                        help_text="Секрет для подписи вебхуков от сервиса доставки",
                        max_length=255,
                    ),
                ),
                (
                    "settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Произвольные настройки интеграции (ID ресторана, склад, тарифы)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Служба доставки",
                "verbose_name_plural": "Службы доставки",
                "indexes": [
                    models.Index(
                        fields=["city", "is_active"], name="orders_delivery_city_active"
                    )
                ],
                "unique_together": {("slug", "city")},
            },
        ),
        migrations.CreateModel(
            name="DeliveryWindow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("city", models.CharField(max_length=120)),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("is_default", models.BooleanField(default=False)),
                (
                    "cutoff_lead_time_minutes",
                    models.PositiveIntegerField(
                        default=120,
                        help_text="За сколько минут до начала слота требуется подтверждение",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_windows",
                        to="orders.deliveryservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Окно доставки",
                "verbose_name_plural": "Окна доставки",
                "ordering": ("city", "start_time"),
                "unique_together": {("service", "city", "start_time", "end_time")},
            },
        ),
        migrations.CreateModel(
            name="MealSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Черновик"),
                            ("active", "Активна"),
                            ("paused", "Пауза"),
                            ("cancelled", "Отменена"),
                            ("expired", "Истекла"),
                        ],
                        default="draft",
                        max_length=16,
                    ),
                ),
                (
                    "autopay_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Если включено — автосписание из кошелька/Stars",
                    ),
                ),
                ("current_period_start", models.DateField(blank=True, null=True)),
                ("current_period_end", models.DateField(blank=True, null=True)),
                ("next_billing_at", models.DateTimeField(blank=True, null=True)),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="ID подписки во внешней биллинговой системе",
                        max_length=128,
                    ),
                ),
                ("city", models.CharField(max_length=120)),
                ("notes", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_menu_plan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Какой план питания сейчас используется для генерации заказов",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subscriptions",
                        to="nutrition.menuplan",
                    ),
                ),
                (
                    "preferred_delivery_window",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subscriptions",
                        to="orders.deliverywindow",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.profile"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Подписка питания",
                "verbose_name_plural": "Подписки питания",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Черновик"),
                            ("pending_payment", "Ожидает оплату"),
                            ("payment_failed", "Ошибка оплаты"),
                            ("paid", "Оплачен"),
                            ("confirmed", "Подтверждён"),
                            ("preparing", "Готовится"),
                            ("out_for_delivery", "Доставляется"),
                            ("delivered", "Доставлен"),
                            ("cancelled", "Отменён"),
                        ],
                        default="draft",
                        max_length=32,
                    ),
                ),
                ("delivery_date", models.DateField()),
                ("city", models.CharField(max_length=120)),
                ("address_line", models.CharField(max_length=255)),
                ("apartment", models.CharField(blank=True, max_length=32)),
                ("entrance", models.CharField(blank=True, max_length=32)),
                ("intercom_code", models.CharField(blank=True, max_length=32)),
                ("courier_instructions", models.TextField(blank=True)),
                (
                    "total_price",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Итоговая стоимость заказа в валюте расчёта",
                        max_digits=10,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("RUB", "Рубли"),
                            ("STARS", "Telegram Stars"),
                            ("CALO", "CaloCoin"),
                        ],
                        default="RUB",
                        max_length=8,
                    ),
                ),
                (
                    "wallet_currency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("RUB", "Рубли"),
                            ("STARS", "Telegram Stars"),
                            ("CALO", "CaloCoin"),
                        ],
                        help_text="Чем фактически оплачен заказ (Stars/CaloCoin)",
                        max_length=8,
                        null=True,
                    ),
                ),
                ("items_count", models.PositiveIntegerField(default=0)),
                ("payment_due_at", models.DateTimeField(blank=True, null=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.CharField(blank=True, max_length=255)),
                (
                    "external_order_id",
                    models.CharField(
                        blank=True,
                        help_text="ID заказа в системе доставки",
                        max_length=128,
                    ),
                ),
                ("tracking_url", models.URLField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "delivery_service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orders",
                        to="orders.deliveryservice",
                    ),
                ),
                (
                    "delivery_window",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="orders.deliverywindow",
                    ),
                ),
                (
                    "menu_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders",
                        to="nutrition.menuplan",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.profile"
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders",
                        to="orders.mealsubscription",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Заказ",
                "verbose_name_plural": "Заказы",
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("1.00"), max_digits=6
                    ),
                ),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Снимок нутриентов, веса и доп. пожеланий клиента",
                    ),
                ),
                (
                    "menu_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="catalog.menuitem",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="orders.order",
                    ),
                ),
                (
                    "plan_meal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="order_items",
                        to="nutrition.planmeal",
                    ),
                ),
            ],
            options={
                "verbose_name": "Позиция заказа",
                "verbose_name_plural": "Позиции заказа",
            },
        ),
        migrations.CreateModel(
            name="PaymentAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("telegram_stars", "Telegram Stars"),
                            ("calocoin", "CaloCoin"),
                            ("card", "Банковская карта"),
                            ("cash", "Наличные"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("initiated", "Создан"),
                            ("pending", "Ожидание подтверждения"),
                            ("succeeded", "Успешно"),
                            ("failed", "Ошибка"),
                            ("cancelled", "Отменён"),
                        ],
                        default="initiated",
                        max_length=16,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("RUB", "Рубли"),
                            ("STARS", "Telegram Stars"),
                            ("CALO", "CaloCoin"),
                        ],
                        default="RUB",
                        max_length=8,
                    ),
                ),
                ("external_payment_id", models.CharField(blank=True, max_length=128)),
                (
                    "confirmation_payload",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Снимок запроса, который отправили внешнему провайдеру",
                    ),
                ),
                ("failure_code", models.CharField(blank=True, max_length=64)),
                ("failure_reason", models.CharField(blank=True, max_length=255)),
                ("webhook_payload", models.JSONField(blank=True, default=dict)),
                ("initiated_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_attempts",
                        to="orders.order",
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_attempts",
                        to="orders.mealsubscription",
                    ),
                ),
            ],
            options={
                "verbose_name": "Попытка оплаты",
                "verbose_name_plural": "Попытки оплаты",
            },
        ),
        migrations.CreateModel(
            name="IntegrationWebhookEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("delivery", "Сервис доставки"),
                            ("payment", "Платёжный провайдер"),
                        ],
                        max_length=16,
                    ),
                ),
                ("external_event_id", models.CharField(blank=True, max_length=128)),
                ("event_type", models.CharField(max_length=64)),
                ("payload", models.JSONField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Получен"),
                            ("processed", "Обработан"),
                            ("failed", "Ошибка обработки"),
                        ],
                        default="received",
                        max_length=16,
                    ),
                ),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("error_details", models.TextField(blank=True)),
                (
                    "related_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="webhook_events",
                        to="orders.order",
                    ),
                ),
                (
                    "related_payment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="webhook_events",
                        to="orders.paymentattempt",
                    ),
                ),
            ],
            options={
                "verbose_name": "Webhook событие",
                "verbose_name_plural": "Webhook события",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", models.CharField(max_length=120)),
                ("description", models.TextField(blank=True)),
                (
                    "city",
                    models.CharField(
                        help_text="Город, для которого доступен тариф. Бот работает локально по городам.",
                        max_length=120,
                    ),
                ),
                (
                    "billing_period",
                    models.CharField(
                        choices=[
                            ("weekly", "Еженедельно"),
                            ("monthly", "Ежемесячно"),
                            ("quarterly", "Ежеквартально"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                (
                    "price_rub",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Полная стоимость тарифа в рублях для отчётности",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "price_telegram_stars",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Стоимость в Telegram Stars для автосписаний",
                        null=True,
                    ),
                ),
                (
                    "price_calocoin",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Стоимость в CaloCoin для внутреннего кошелька",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("meals_per_week", models.PositiveSmallIntegerField(default=7)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Дополнительные параметры (минимальный заказ, доп. услуги)",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "default_delivery_window",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="default_for_subscription_plans",
                        to="orders.deliverywindow",
                    ),
                ),
                (
                    "delivery_service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="subscription_plans",
                        to="orders.deliveryservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Подписочный тариф",
                "verbose_name_plural": "Подписочные тарифы",
            },
        ),
        migrations.AddField(
            model_name="mealsubscription",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="subscriptions",
                to="orders.subscriptionplan",
            ),
        ),
        migrations.CreateModel(
            name="WalletTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("STARS", "Telegram Stars"), ("CALO", "CaloCoin")],
                        max_length=8,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[
                            ("debit", "Списание"),
                            ("credit", "Пополнение"),
                            ("hold", "Блокировка средств"),
                            ("release", "Разблокировка"),
                        ],
                        max_length=16,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "В обработке"),
                            ("confirmed", "Подтверждена"),
                            ("released", "Разблокирована"),
                            ("failed", "Ошибка"),
                        ],
                        default="pending",
                        max_length=16,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "balance_before",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "balance_after",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=12
                    ),
                ),
                (
                    "idempotency_key",
                    models.CharField(
                        help_text="Используется для защиты от двойного списания",
                        max_length=128,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "occurred_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wallet_transactions",
                        to="users.profile",
                    ),
                ),
                (
                    "related_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="wallet_transactions",
                        to="orders.order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Транзакция кошелька",
                "verbose_name_plural": "Транзакции кошелька",
            },
        ),
        migrations.AddField(
            model_name="paymentattempt",
            name="wallet_transaction",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="payment_attempt",
                to="orders.wallettransaction",
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["status", "delivery_date"], name="orders_order_status_date"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["external_order_id"], name="orders_order_external_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="orderitem",
            index=models.Index(
                fields=["order", "menu_item"], name="orders_orderitem_menu_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="integrationwebhookevent",
            index=models.Index(
                fields=["source", "status"], name="orders_webhook_source_status"
            ),
        ),
        migrations.AddIndex(
            model_name="integrationwebhookevent",
            index=models.Index(
                fields=["external_event_id"], name="orders_webhook_external_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscriptionplan",
            index=models.Index(
                fields=["city", "is_active"], name="orders_sub_city_active"
            ),
        ),
        migrations.AddIndex(
            model_name="mealsubscription",
            index=models.Index(
                fields=["status", "city"], name="orders_sub_status_city"
            ),
        ),
        migrations.AddIndex(
            model_name="mealsubscription",
            index=models.Index(
                fields=["next_billing_at"], name="orders_sub_billing_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="wallettransaction",
            index=models.Index(
                fields=["currency", "occurred_at"], name="orders_wallet_currency_date"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="wallettransaction",
            unique_together={("profile", "idempotency_key")},
        ),
        migrations.AddIndex(
            model_name="paymentattempt",
            index=models.Index(
                fields=["provider", "status"], name="orders_payment_provider_status"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentattempt",
            index=models.Index(
                fields=["external_payment_id"], name="orders_payment_external_idx"
            ),
        ),
    ]